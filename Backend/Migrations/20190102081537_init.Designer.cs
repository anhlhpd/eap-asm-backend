// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(BackendContext))]
    [Migration("20190102081537_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("Salt");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Backend.Models.AccountRole", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<string>("AccountId");

                    b.HasKey("RoleId", "AccountId");

                    b.HasAlternateKey("AccountId", "RoleId");

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("Backend.Models.Clazz", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CurrentSubjectId")
                        .IsRequired();

                    b.Property<int>("Session");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("Session", "StartDate")
                        .IsUnique();

                    b.ToTable("Clazz");
                });

            modelBuilder.Entity("Backend.Models.ClazzAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId");

                    b.Property<string>("ClazzId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ClazzId");

                    b.ToTable("ClazzAccount");
                });

            modelBuilder.Entity("Backend.Models.ClazzSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClazzId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DeletedAt");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("SubjectId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ClazzId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClazzSubject");
                });

            modelBuilder.Entity("Backend.Models.Credential", b =>
                {
                    b.Property<string>("OwnerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken");

                    b.Property<string>("AccountId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("OwnerId");

                    b.HasIndex("AccessToken")
                        .IsUnique()
                        .HasFilter("[AccessToken] IS NOT NULL");

                    b.HasIndex("AccountId");

                    b.ToTable("Credential");
                });

            modelBuilder.Entity("Backend.Models.GeneralInformation", b =>
                {
                    b.Property<string>("AccountId");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.HasKey("AccountId");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("GeneralInformation");
                });

            modelBuilder.Entity("Backend.Models.Mark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("MarkType");

                    b.Property<int>("Status");

                    b.Property<string>("SubjectId")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<float>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Mark");
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Backend.Models.Subject", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("Backend.Models.AccountRole", b =>
                {
                    b.HasOne("Backend.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Models.Clazz", b =>
                {
                    b.HasOne("Backend.Models.Subject", "Subject")
                        .WithMany("Clazzes")
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("Backend.Models.ClazzAccount", b =>
                {
                    b.HasOne("Backend.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Backend.Models.Clazz", "Clazz")
                        .WithMany()
                        .HasForeignKey("ClazzId");
                });

            modelBuilder.Entity("Backend.Models.ClazzSubject", b =>
                {
                    b.HasOne("Backend.Models.Clazz", "Clazz")
                        .WithMany()
                        .HasForeignKey("ClazzId");

                    b.HasOne("Backend.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("Backend.Models.Credential", b =>
                {
                    b.HasOne("Backend.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("Backend.Models.GeneralInformation", b =>
                {
                    b.HasOne("Backend.Models.Account", "Account")
                        .WithOne("GeneralInformation")
                        .HasForeignKey("Backend.Models.GeneralInformation", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Models.Mark", b =>
                {
                    b.HasOne("Backend.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
