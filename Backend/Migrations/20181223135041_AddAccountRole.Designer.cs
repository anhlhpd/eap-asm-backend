// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(BackendContext))]
    [Migration("20181223135041_AddAccountRole")]
    partial class AddAccountRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Models.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountStatus");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("Salt");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("AccountId");

                    b.ToTable("Account");

                    b.HasData(
                        new { AccountId = "ADMIN", AccountStatus = 1, CreatedAt = new DateTime(2018, 12, 23, 20, 50, 40, 564, DateTimeKind.Local), DeletedAt = new DateTime(2018, 12, 23, 20, 50, 40, 565, DateTimeKind.Local), Email = "admin@admin.com", Password = "xFqwpzKM8kAhDCYDIWu1rg8bikCAMa1k7elxc1H82K4=", Salt = "6lYr+zM81vlg9t/ngiIr/g==", UpdatedAt = new DateTime(2018, 12, 23, 20, 50, 40, 565, DateTimeKind.Local), Username = "ADMIN" }
                    );
                });

            modelBuilder.Entity("Backend.Models.AccountRole", b =>
                {
                    b.Property<string>("AccountId");

                    b.Property<int>("RoleId");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("Backend.Models.Credential", b =>
                {
                    b.Property<string>("AccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken");

                    b.Property<string>("AccountId1");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountId1");

                    b.ToTable("Credential");
                });

            modelBuilder.Entity("Backend.Models.PersonalInformation", b =>
                {
                    b.Property<string>("AccountId");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("Phone");

                    b.HasKey("AccountId");

                    b.ToTable("PersonalInformation");

                    b.HasData(
                        new { AccountId = "ADMIN", Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), FirstName = "ADMIN", Gender = 2, LastName = "ADMIN" }
                    );
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("Name");

                    b.Property<int>("RoleStatus");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Backend.Models.AccountRole", b =>
                {
                    b.HasOne("Backend.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Models.Credential", b =>
                {
                    b.HasOne("Backend.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId1");
                });

            modelBuilder.Entity("Backend.Models.PersonalInformation", b =>
                {
                    b.HasOne("Backend.Models.Account", "Account")
                        .WithOne("PersonalInformation")
                        .HasForeignKey("Backend.Models.PersonalInformation", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
